[{"content":"從0開始做個dc機器人本來就蠻花時間，而且如果是初學者那更不知道要從哪開始\n所以把過往寫機器人的一些管理技巧整理整理，變成一個模板，不用直接from scratch\n我主要是朝向模組化開發，因為我看很多人在寫bot，都把event、command都塞在main.js裡面\n指令的判斷也是用if...else實作，不好管理還難閱讀\n用require，把每個指令拆成一個檔案，動態載入，刪減也很方便\n1 2 3 +---commands | help.js | ping.js 然後slash command我沒有照一般application commands要註冊，而是在加入伺服器時直接設定\n離開再刪除\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // events\\guildCreate.js const { Events, } = require(\u0026#39;discord.js\u0026#39;); module.exports = { name: Events.GuildCreate, async execute(guild) { guild.commands.set(guild.client.slashCommands.map((command) =\u0026gt; command.data)); }, }; // events\\guildDelete.js module.exports = { name: Events.GuildDelete, async execute(guild) { guild.commands.set([]); }, }; Repo連結：Chaoray/DiscordBotTemplate\n","date":"2023-02-05T17:32:11+08:00","permalink":"https://chaoray.github.io/p/discord-bot-%E6%A8%A1%E6%9D%BF/","title":"Discord Bot 模板"},{"content":"Preface I wondered, what if a class, for example A, has two methods, one that can only be call when A is not a instance, but the other one can only be call when A is an instance.\nPseudo Code\n1 2 3 4 5 6 7 class A; A.do1(); A.do2(); // error a = new A(); a.do1(); // error a.do2(); I looked up for a while on the Internet, and I found there is actually a thing called Static Member.\nWhat is a static member There is only one copy of that member. It is initialized when the program start, even before main starts. It stands for the entire program life. For example\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 using System; public class A { public static int do1() { return 1; } public int do2() { return 2; } } public class Program { public static void Main() { Console.WriteLine(A.do1()); A a = new A(); Console.WriteLine(a.do2()); } } But if I do\n1 2 3 4 5 a.do1(); // Member \u0026#39;A.do1\u0026#39; cannot be accessed with an instance reference; qualify it with a type name instead A.do2(); // An object reference is required for the non-static field, method, or property \u0026#39;A.do2()\u0026#39; This is pretty handy when I need to use something that doesn\u0026rsquo;t belong to the instance.\nHowever, it does belong to the class.\nLike\n1 2 3 4 5 6 7 8 9 class Window { static HWND getActive() { return GetActiveWindow(); } RECT getRect() { return this.rect; } } ActiveWindow is not a part of current window; nevertheless, rect is.\nVery interesting. :D\n","date":"2023-02-04T21:35:56+08:00","permalink":"https://chaoray.github.io/p/oop-static-member/","title":"OOP - Static Member"},{"content":"用管理員開啟cmd後，輸入\n1 bcdedit -set TESTSIGNING OFF 重啟電腦後就消失了~\n","date":"2023-01-20T16:30:19+08:00","permalink":"https://chaoray.github.io/p/%E5%8E%BB%E6%8E%89%E5%95%9F%E7%94%A8windows%E6%B5%AE%E6%B0%B4%E5%8D%B0/","title":"去掉啟用Windows浮水印"},{"content":"Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum ultrices nisi a efficitur commodo. Maecenas ornare mauris nec risus finibus, vestibulum fringilla arcu egestas. Maecenas pharetra, libero eu condimentum euismod, velit arcu semper felis, eu porta sapien sem ac mauris. Sed id bibendum ligula, a iaculis nisl. Sed sit amet nulla elementum, auctor odio sagittis, hendrerit nunc. Ut vehicula orci ut leo blandit, vel mattis risus consequat. Ut sit amet ante aliquam, congue metus vel, congue tellus. Suspendisse cursus feugiat quam in euismod. Curabitur eros ligula, scelerisque eu suscipit in, tincidunt quis urna. Integer rutrum porttitor bibendum. Nam commodo pulvinar felis et feugiat. Sed tincidunt luctus ullamcorper.\nDonec odio mi, hendrerit non metus vel, consequat pellentesque nulla. Fusce interdum velit tortor, vitae interdum nulla aliquet vitae. Donec dapibus nulla eu auctor mollis. Fusce rutrum ipsum eget tincidunt gravida. Vivamus faucibus porttitor massa ut sagittis. Pellentesque pulvinar aliquam urna, bibendum auctor dolor auctor ut. Nullam efficitur ac metus vel consectetur. Nunc purus velit, rutrum ut magna euismod, maximus feugiat dolor. Curabitur rhoncus odio nec quam placerat venenatis. Donec tortor dolor, dapibus id leo interdum, mattis dignissim ipsum.\n1 2 3 4 5 6 7 Nulla scelerisque est est, id fermentum tellus feugiat ac. Phasellus pellentesque odio mattis tellus porttitor porttitor. Sed ullamcorper massa eget enim viverra, eget congue augue eleifend. Fusce posuere enim at sagittis blandit. Nullam dapibus lorem quis tortor ultrices lobortis eget quis odio. Pellentesque non urna ultricies, aliquam odio vitae, lacinia odio. Praesent ullamcorper id mauris et posuere. Integer sit amet efficitur ante, non eleifend tortor. Nunc sollicitudin lobortis tempor. In hendrerit sem id massa egestas, tincidunt tincidunt libero tempus. Nulla vitae auctor elit, id auctor ligula. Donec eget porttitor elit. Praesent at facilisis felis, ac consequat quam. Vestibulum consequat, neque eu dictum semper, libero tellus suscipit metus, quis finibus risus quam a nisl. Quisque tempor laoreet odio nec ornare. Nulla facilisi. Morbi eros est, convallis imperdiet urna et, sagittis feugiat ex. Proin laoreet rutrum turpis, eu pretium lorem placerat vestibulum. Praesent a leo odio. Nam sed turpis massa. Sed eu lacus sed nunc bibendum tempor. Sed auctor elementum urna, vitae lacinia nunc tempor at. Nam sed ornare est. Cras ullamcorper eget dui quis convallis. Morbi augue ante, dapibus ut semper sit amet, porta pharetra lacus. Sed est est, dictum sit amet finibus eget, iaculis posuere nunc. Curabitur leo quam, congue eu arcu lobortis, cursus pellentesque tortor. Morbi sit amet commodo odio. Integer eu sem eget odio semper mattis eget eu ante. Integer tempus arcu sed pretium pellentesque. Vestibulum euismod euismod aliquam. Donec pretium sapien et ipsum pharetra, quis suscipit tortor tristique. Aenean arcu libero, efficitur eget accumsan a, volutpat ut metus. Nulla eget auctor nunc, sit amet mollis dui. Aliquam egestas libero non lectus fermentum sollicitudin.\nDonec eget tellus in justo tincidunt consectetur sit amet sed purus.\nVestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Integer eleifend ultrices congue.\nAenean vulputate nibh quis sodales venenatis. Duis fermentum quam a ante fringilla, sit amet vestibulum diam faucibus. Proin gravida sed urna ac commodo. Phasellus libero massa, lobortis non enim nec, consequat mollis nunc. Fusce fringilla ultricies euismod. Nullam dignissim nulla id est convallis condimentum. Vivamus enim urna, rutrum at nisi ut, ullamcorper malesuada sapien. Integer vestibulum lobortis metus, nec tincidunt tortor pharetra sit amet.\n","date":"2023-01-15T13:43:28+08:00","permalink":"https://chaoray.github.io/p/lorem-ipsum/","title":"Lorem Ipsum"},{"content":"Wanna make the class be able to do a chain-call\n1 2 3 4 5 6 7 8 9 10 11 class TextBox { string text; TextBox addText(const string\u0026amp; append) { text += append; return this; } }; TextBox textBox1; textBox1.addText(\u0026#34;Text1\u0026#34;).addText(\u0026#34;Text2\u0026#34;).addText(\u0026#34;Text3\u0026#34;); This is not going to work :P\n1 2 3 4 5 6 7 8 9 10 11 class TextBox { string text; TextBox\u0026amp; addText(const string\u0026amp; append) { text += append; return *this; } }; TextBox textBox1; textBox1.addText(\u0026#34;Text1\u0026#34;).addText(\u0026#34;Text2\u0026#34;).addText(\u0026#34;Text3\u0026#34;); Works fine!\nOr you can\n1 2 3 4 5 6 7 8 9 10 11 class TextBox { string text; TextBox* addText(const string\u0026amp; append) { text += append; return this; } }; TextBox textBox1; (*(*textBox1.addText(\u0026#34;Text1\u0026#34;)).addText(\u0026#34;Text2\u0026#34;)).addText(\u0026#34;Text3\u0026#34;); Longer, more verbose.\n","date":"2023-01-15T10:44:46+08:00","permalink":"https://chaoray.github.io/p/c-class-return-self/","title":"C++ Class Return Self"}]