[{"content":"在學寫C++的時候，不想用Visual Studio(太肥)，只好拿VSCode來練練手\n這樣的話就要額外裝編譯器了\n想當時裝個MinGW，就不知道如何下手，研究過後寫篇文章幫幫他人\nMSYS2：微軟官方推薦安裝 官網：MSYS2 - Getting Started\n先下載安裝檔，下載位置官網點進去就有，很大很亮眼\n打開後一直點Next即可，當然途中想改安裝位置也沒問題 按Finish後會跳出一個終端機視窗，請注意紅框中的UCRT64 目前MSys2內的Mingw分七種版本：\n名稱 前綴 工具鏈 架構 C 函式庫 C++ 函式庫 MSYS /usr gcc x86_64 cygwin libstdc++ UCRT64 /ucrt64 gcc x86_64 ucrt libstdc++ CLANG64 /clang64 llvm x86_64 ucrt libc++ CLANGARM64 /clangarm64 llvm aarch64 ucrt libc++ CLANG32 /clang32 llvm i686 ucrt libc++ MINGW64 /mingw64 gcc x86_64 msvcrt libstdc++ MINGW32 /mingw64 gcc i686 msvcrt libstdc++ 而MSYS2本身，只能算是一個幫助你建置環境的工具\n那剛剛提到的UCRT又是甚麼?\nUCRT的全名是Universal C Runtime，被Microsoft Visual Studio採用\n主打更好的相容性，用起來跟MSVCRT一樣\nMinGW則採用MSVCRT，Microsoft Visual C++ Runtime，看名字就知道跟微軟有關，可是聽MSYS2官網的介紹是缺點一堆阿\u0026hellip;\n唯一的好處是只要你用Windows系統那就可以直接用，真不錯(?\n原文連結：Environments - MSYS2\n我該安裝哪種? 如果你是在Windows系統上做開發，UCRT64跟MINGW64都可以\n但是我推薦UCRT\n接下來我會分兩種教學\n安裝教學 注意你用的終端機版本 這是UCRT64的 這是MINGW64的 在終端機中打上 UCRT\n1 pacman -S mingw-w64-ucrt-x86_64-gcc MINGW\n1 pacman -S mingw-w64-x86_64-gcc 確認安裝\n1 :: Proceed with installation? [Y/n] \u0026lt;-- 這裡輸入Y(大寫) 等他載完即可，記得確認一下安裝是否正確\n1 gcc --version 1 2 3 4 5 # gcc --version gcc.exe (Rev10, Built by MSYS2：2023-02-19 Copyright (C) 2022 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 安裝工具包(可選) UCRT\n1 pacman -S mingw-w64-ucrt-x86_64-toolchain MINGW\n1 pacman -S mingw-w64-x86_64-toolchain 因為是包，所以會跟你確認有哪些要裝\n第一次安裝的大人請直接Enter略過，等之後有經驗了變成小孩再選擇\n1 Enter a selection (default=all): \u0026lt;-- Enter 跑完就ok了~\n重點：加入系統路徑 首先要知道你的MSYS2裝在哪裡\n以剛剛安裝為例，應該是裝在C:\\msys64下\n然後去資料夾內依照你安裝的版本，尋找\\ucrt64或\\mingw64\n以安裝ucrt64為例：\n裡面內有個名為bin的，請將此資料夾路徑複製下來\n1 C:\\msys64\\ucrt64\\bin 然後按Win+R，輸入\n1 rundll32 sysdm.cpl,EditEnvironmentVariables 找到Path後按編輯\n進去之後按新增-\u0026gt;貼上剛剛複製的路徑-\u0026gt;確定\n如果你以上步驟都正確，沒有出現錯誤\n那麼恭喜你，你可以開始學習C/C++之路了\n編譯C\n1 gcc main.c -o main.exe 編譯C++\n1 g++ main.c -o main.exe MinGW Manager：坊間古早味 直接上Google搜尋vscode 安裝c++，大概會找到MinGW Manager\n它的優點：\n簡單快速 視覺化安裝 缺點：\n版本很舊 對比一下MSYS2跟MinGW Manager的最後更新時間 (截自文章發布)：\nMinGW Manager： 2017-09-06 MSYS2：2023-02-19 差太多了吧！本身很舊以外，裡面的安裝包還是2013年的\n所以不想被時代潮流汰換的話，還是安裝MSYS2會比較好\nMinGW Manager載點：MinGW - Minimalist GNU for Windows\n網路上教學很多，我只介紹一下\n米爾大大教學：[VSCode] Visual Studio Code 執行 C++ (1) - 安裝 VSCode + MinGW\n","date":"2023-02-25T14:16:22+08:00","image":"https://chaoray.github.io/p/%E5%9C%A8windows%E5%AE%89%E8%A3%9Dgnu-compiler/msg-intellisense_hu1da1126b82c3201fcfa749294077f303_65014_120x120_fill_q75_box_smart1.jpg","permalink":"https://chaoray.github.io/p/%E5%9C%A8windows%E5%AE%89%E8%A3%9Dgnu-compiler/","title":"在Windows安裝GNU Compiler"},{"content":"從0開始做個dc機器人本來就蠻花時間，而且如果是初學者那更不知道要從哪開始\n所以把過往寫機器人的一些管理技巧整理整理，變成一個模板，不用直接from scratch\n我主要是朝向模組化開發，因為我看很多人在寫bot，都把event、command都塞在main.js裡面\n指令的判斷也是用if...else實作，不好管理還難閱讀\n用require，把每個指令拆成一個檔案，動態載入，刪減也很方便\n1 2 3 +---commands | help.js | ping.js 然後slash command我沒有照一般application commands要註冊，而是在加入伺服器時直接設定\n離開再刪除\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // events\\guildCreate.js const { Events, } = require(\u0026#39;discord.js\u0026#39;); module.exports = { name: Events.GuildCreate, async execute(guild) { guild.commands.set(guild.client.slashCommands.map((command) =\u0026gt; command.data)); }, }; // events\\guildDelete.js module.exports = { name: Events.GuildDelete, async execute(guild) { guild.commands.set([]); }, }; Repo連結：Chaoray/DiscordBotTemplate\n","date":"2023-02-05T17:32:11+08:00","image":"https://chaoray.github.io/p/discord-bot-%E6%A8%A1%E6%9D%BF/title_hu9f508b376280e6ea0664b4bd3d37cee9_258059_120x120_fill_box_smart1_3.png","permalink":"https://chaoray.github.io/p/discord-bot-%E6%A8%A1%E6%9D%BF/","title":"Discord Bot 模板"},{"content":"Preface I wondered, what if a class, for example A, has two methods, one that can only be call when A is not a instance, but the other one can only be call when A is an instance.\nPseudo Code\n1 2 3 4 5 6 7 class A; A.do1(); A.do2(); // error a = new A(); a.do1(); // error a.do2(); I looked up for a while on the Internet, and I found there is actually a thing called Static Member.\nWhat is a static member There is only one copy of that member. It is initialized when the program start, even before main starts. It stands for the entire program life. For example\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 using System; public class A { public static int do1() { return 1; } public int do2() { return 2; } } public class Program { public static void Main() { Console.WriteLine(A.do1()); A a = new A(); Console.WriteLine(a.do2()); } } But if I do\n1 2 3 4 5 a.do1(); // Member \u0026#39;A.do1\u0026#39; cannot be accessed with an instance reference; qualify it with a type name instead A.do2(); // An object reference is required for the non-static field, method, or property \u0026#39;A.do2()\u0026#39; This is pretty handy when I need to use something that doesn\u0026rsquo;t belong to the instance.\nHowever, it does belong to the class.\nLike\n1 2 3 4 5 6 7 8 9 class Window { static HWND getActive() { return GetActiveWindow(); } RECT getRect() { return this.rect; } } ActiveWindow is not a part of current window; nevertheless, rect is.\nVery interesting. :D\n","date":"2023-02-04T21:35:56+08:00","permalink":"https://chaoray.github.io/p/oop-static-member/","title":"OOP - Static Member"},{"content":"用管理員開啟cmd後，輸入\n1 bcdedit -set TESTSIGNING OFF 重啟電腦後就消失了~\n","date":"2023-01-20T16:30:19+08:00","permalink":"https://chaoray.github.io/p/%E5%8E%BB%E6%8E%89%E5%95%9F%E7%94%A8windows%E6%B5%AE%E6%B0%B4%E5%8D%B0/","title":"去掉啟用Windows浮水印"},{"content":"Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum ultrices nisi a efficitur commodo. Maecenas ornare mauris nec risus finibus, vestibulum fringilla arcu egestas. Maecenas pharetra, libero eu condimentum euismod, velit arcu semper felis, eu porta sapien sem ac mauris. Sed id bibendum ligula, a iaculis nisl. Sed sit amet nulla elementum, auctor odio sagittis, hendrerit nunc. Ut vehicula orci ut leo blandit, vel mattis risus consequat. Ut sit amet ante aliquam, congue metus vel, congue tellus. Suspendisse cursus feugiat quam in euismod. Curabitur eros ligula, scelerisque eu suscipit in, tincidunt quis urna. Integer rutrum porttitor bibendum. Nam commodo pulvinar felis et feugiat. Sed tincidunt luctus ullamcorper.\nDonec odio mi, hendrerit non metus vel, consequat pellentesque nulla. Fusce interdum velit tortor, vitae interdum nulla aliquet vitae. Donec dapibus nulla eu auctor mollis. Fusce rutrum ipsum eget tincidunt gravida. Vivamus faucibus porttitor massa ut sagittis. Pellentesque pulvinar aliquam urna, bibendum auctor dolor auctor ut. Nullam efficitur ac metus vel consectetur. Nunc purus velit, rutrum ut magna euismod, maximus feugiat dolor. Curabitur rhoncus odio nec quam placerat venenatis. Donec tortor dolor, dapibus id leo interdum, mattis dignissim ipsum.\n1 2 3 4 5 6 7 Nulla scelerisque est est, id fermentum tellus feugiat ac. Phasellus pellentesque odio mattis tellus porttitor porttitor. Sed ullamcorper massa eget enim viverra, eget congue augue eleifend. Fusce posuere enim at sagittis blandit. Nullam dapibus lorem quis tortor ultrices lobortis eget quis odio. Pellentesque non urna ultricies, aliquam odio vitae, lacinia odio. Praesent ullamcorper id mauris et posuere. Integer sit amet efficitur ante, non eleifend tortor. Nunc sollicitudin lobortis tempor. In hendrerit sem id massa egestas, tincidunt tincidunt libero tempus. Nulla vitae auctor elit, id auctor ligula. Donec eget porttitor elit. Praesent at facilisis felis, ac consequat quam. Vestibulum consequat, neque eu dictum semper, libero tellus suscipit metus, quis finibus risus quam a nisl. Quisque tempor laoreet odio nec ornare. Nulla facilisi. Morbi eros est, convallis imperdiet urna et, sagittis feugiat ex. Proin laoreet rutrum turpis, eu pretium lorem placerat vestibulum. Praesent a leo odio. Nam sed turpis massa. Sed eu lacus sed nunc bibendum tempor. Sed auctor elementum urna, vitae lacinia nunc tempor at. Nam sed ornare est. Cras ullamcorper eget dui quis convallis. Morbi augue ante, dapibus ut semper sit amet, porta pharetra lacus. Sed est est, dictum sit amet finibus eget, iaculis posuere nunc. Curabitur leo quam, congue eu arcu lobortis, cursus pellentesque tortor. Morbi sit amet commodo odio. Integer eu sem eget odio semper mattis eget eu ante. Integer tempus arcu sed pretium pellentesque. Vestibulum euismod euismod aliquam. Donec pretium sapien et ipsum pharetra, quis suscipit tortor tristique. Aenean arcu libero, efficitur eget accumsan a, volutpat ut metus. Nulla eget auctor nunc, sit amet mollis dui. Aliquam egestas libero non lectus fermentum sollicitudin.\nDonec eget tellus in justo tincidunt consectetur sit amet sed purus.\nVestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Integer eleifend ultrices congue.\nAenean vulputate nibh quis sodales venenatis. Duis fermentum quam a ante fringilla, sit amet vestibulum diam faucibus. Proin gravida sed urna ac commodo. Phasellus libero massa, lobortis non enim nec, consequat mollis nunc. Fusce fringilla ultricies euismod. Nullam dignissim nulla id est convallis condimentum. Vivamus enim urna, rutrum at nisi ut, ullamcorper malesuada sapien. Integer vestibulum lobortis metus, nec tincidunt tortor pharetra sit amet.\n","date":"2023-01-15T13:43:28+08:00","image":"https://chaoray.github.io/p/lorem-ipsum/title_hua3f7ea6c6c9a6e5d3000e29f1c04374f_385510_120x120_fill_box_smart1_3.png","permalink":"https://chaoray.github.io/p/lorem-ipsum/","title":"Lorem Ipsum"},{"content":"Wanna make the class be able to do a chain-call\n1 2 3 4 5 6 7 8 9 10 11 class TextBox { string text; TextBox addText(const string\u0026amp; append) { text += append; return this; } }; TextBox textBox1; textBox1.addText(\u0026#34;Text1\u0026#34;).addText(\u0026#34;Text2\u0026#34;).addText(\u0026#34;Text3\u0026#34;); This is not going to work :P\n1 2 3 4 5 6 7 8 9 10 11 class TextBox { string text; TextBox\u0026amp; addText(const string\u0026amp; append) { text += append; return *this; } }; TextBox textBox1; textBox1.addText(\u0026#34;Text1\u0026#34;).addText(\u0026#34;Text2\u0026#34;).addText(\u0026#34;Text3\u0026#34;); Works fine!\nOr you can\n1 2 3 4 5 6 7 8 9 10 11 class TextBox { string text; TextBox* addText(const string\u0026amp; append) { text += append; return this; } }; TextBox textBox1; (*(*textBox1.addText(\u0026#34;Text1\u0026#34;)).addText(\u0026#34;Text2\u0026#34;)).addText(\u0026#34;Text3\u0026#34;); Longer, more verbose.\n","date":"2023-01-15T10:44:46+08:00","permalink":"https://chaoray.github.io/p/c-class-return-self/","title":"C++ Class Return Self"}]